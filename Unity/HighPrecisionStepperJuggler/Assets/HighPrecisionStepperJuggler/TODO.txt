

[ ] fix ball position spawning every frame (bad performance impact)
[X] figure out whether or not velocity data is reliable
[X] change plate to octagon (import new model data).
[X] update CAD data to reflect new plate design.

[ ] fix runtime error that occurs when no camera is connected.
[ ] Write latex math file

lower link length: 89
upper link length: 80
upper most link length: 35 + 6.5 + 8 = 49.5 (from plate edge to joint) 
upper most link from joint to motor axis center: 49.5 + 21.023 = 70.523

memo:

[X] look at ball velocity right after ball hit and use past airborne-time to predict where the ball will be coming down
    Use all this information to get the tilt right on down-movement
    [X] smaller up/down movement possible with this approach? -> tested.

[ ] change the tilt-input from radians to degrees
[ ] check if the x and y tilts are still correct when applied together
[ ] check whether it is save to use higher tilt cap min/max values
[ ] add Debug.Log message when the tilt is getting capped
[ ] test whether or not we're able to get the thing working with a higher baud rate for better responsability 

[ ] implement analytical tilt controller
    [ ] work out math on paper
[X] test whether the downwards ball velocity before hit (whith a 0.6s period) is 2.9 m/s as expected -> was OK.

[ ] add "predictedHitPosition vs. actual hit position heatmap"-view
    [ ] maybe make the predicted position toggle-able
    
[ ] show PID target positions in gradient descent view
[ ] add radar style turning radius with fade to ball position visualization

[ ] add some sort of index of all the things that will be featured in the video.
    show it in full first, than show the current thing only (e.g. "0: flexing")
    -> display current ball control strategy
    
[ ] circle bouncing with moving PID center
[ ] maybe make gradient descent lines stand out a little bit more

[ ] 2 ball bouncing
    [ ] implemented code needed for this
    [ ] might be possible with Continuous2StepBouncingLow
    [ ] add ball 2 ball data
    [ ] add ball 2 ball data visualization
    [ ] bounce A -> just correct B -> just correct A -> bounce B -> just correct A -> just correct B -> bounce A?
    
[ ] freeze datapoint-stream on ball data used by PID?
[ ] maybe implement some sort of self-learning PID supported algorithm (given speed and distance from center before impact)
[ ] alternating x and y correction
[ ] velocity correction every bounce but p-correction alternating between x and y
[ ] bring ball to halt by catching it softly.
[ ] implement shallow bouncing
[ ] try to hit the ball a bit faster now that the plate has become lighter  
[ ] maybe hit ball without upwards motion when the ball moves very fast to get it under control faster.

[ ] maybe add a circleness check and discard detected object with a low circleness 
    Not really needed since there's normally not much noise in the video stream. But it'd be a nice to have.
    Just in case. Or for demos where there's a hand showing.

[ ] make radius result of image processing more precise (results differ from center to edge)

[X] check whether or not the tilt is constant when moving up with tilted plate
    [ ] turns out we DO have a problem with the tilt shifting ever so slightly while moving upwards with a tilted plate


// vid:
[ ] front view, change to unity graphics, look around, ent up in top view, change to realtime video again (top view)
[ ] start with short flex, then throwing ball onto machine

